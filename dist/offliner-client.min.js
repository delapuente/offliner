!function(e){"use strict";var t=1,n=e.off,r=function(){var e=new URL(document.currentScript.dataset.root||"",window.location.origin).href;return e.endsWith("/")?e:e+"/"}(),s=r+(document.currentScript.dataset.worker||"offliner-worker.js");e.off={_eventListeners:{},_xpromises:{},restore:function(){return e.off=n,this},install:function(){return this._installMessageHandlers(),navigator.serviceWorker.register(s,{scope:r})},connect:function(){this._installMessageHandlers()},on:function(e,t,n){this._has(e,t,n)||(this._eventListeners[e]=this._eventListeners[e]||[],this._eventListeners[e].push([t,n]))},update:function(){return this._xpromise("update")},activate:function(){return this._xpromise("activate")},_runListeners:function(e,t){var n=this._eventListeners[e]||[];n.forEach(function(e){var n=e[0],r=e[1];n.call(r,t)})},_installMessageHandlers:function i(){function e(e){var n=e.data,r=n?n.type:"",s=r.split(":");"offliner"===s[0]&&t._handleMessage(s[1],n)}var t=this;if(!i.done){if("function"==typeof BroadcastChannel){var n=new BroadcastChannel("offliner-channel");n.onmessage=e}else navigator.serviceWorker.addEventListener("message",e);i.done=!0}},_handleMessage:function(e,t){navigator.serviceWorker;"xpromise"===e?this._resolveCrossPromise(t):this._runListeners(e,t)},_has:function(e,t,n){for(var r,s=this._eventListeners[e]||[],i=0;r=s[i];i++)if(r[0]===t&&r[1]===n)return!0;return!1},_xpromise:function(e){return new Promise(function(n,r){function s(e){r(new Error(e))}var i=t++,o={type:"xpromise",id:i,order:e};this._xpromises[i]=[n,s],this._send(o)}.bind(this))},_send:function(e){navigator.serviceWorker.getRegistration().then(function(t){return t&&t.active?t.active.postMessage(e):void warn("Not service worker active right now.")})},_resolveCrossPromise:function(e){var t=this._xpromises[e.id];t?t["rejected"===e.status?1:0](e.value):console.warn("Trying to resolve unexistent promise:",e.id)}}}(this.exports||this);